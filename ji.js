// Generated by CoffeeScript 1.5.0
(function() {
  var EventEmitter, Printer, Program, Reader, fs, program,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  fs = require('fs');

  Reader = (function(_super) {

    __extends(Reader, _super);

    function Reader() {
      Reader.__super__.constructor.apply(this, arguments);
    }

    Reader.prototype.readStandardInput = function() {
      var _this = this;
      process.stdin.setEncoding('utf8');
      process.stdin.resume();
      return this.readStream('(standard input)', process.stdin, function() {
        return _this.emit('end');
      });
    };

    Reader.prototype._readNextFile = function() {
      var filename, stream,
        _this = this;
      filename = this._filenames.shift();
      if (filename) {
        stream = fs.createReadStream(filename);
        stream.setEncoding('utf8');
        return this.readStream(filename, stream, function() {
          return _this._readNextFile();
        });
      } else {
        return this.emit('end');
      }
    };

    Reader.prototype.readFiles = function(filenames) {
      this._filenames = filenames.slice();
      return this._readNextFile();
    };

    Reader.prototype.readStream = function(name, stream, done) {
      var data,
        _this = this;
      data = '';
      stream.on('data', function(chunk) {
        return data += chunk;
      });
      return stream.on('end', function() {
        var document;
        document = JSON.parse(data);
        return _this.emit('data', name, document);
      });
    };

    return Reader;

  })(EventEmitter);

  Printer = (function() {

    function Printer() {}

    Printer.prototype.print = function(data) {
      var str;
      str = JSON.stringify(data, null, 2);
      return console.log(str);
    };

    return Printer;

  })();

  Program = (function() {

    function Program() {
      this.reader = new Reader;
      this.printer = new Printer;
      this.buildOptions();
    }

    Program.prototype.options = {
      path: {
        short: 'p'
      },
      replace: {
        short: 'r'
      },
      flat: {
        short: 'f',
        boolean: true
      }
    };

    Program.prototype.buildOptions = function() {
      var name, option, _ref, _results;
      this._options = {};
      _ref = this.options;
      _results = [];
      for (name in _ref) {
        option = _ref[name];
        option.name = name;
        option.long || (option.long = name);
        this._options[option.long] = option;
        if (option.short) {
          _results.push(this._options[option.short] = option);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Program.prototype.parse = function(argv) {
      return this.filenames = argv.slice(2);
    };

    Program.prototype.run = function() {
      var _this = this;
      this.parse(process.argv);
      this.reader.on('data', function(name, document) {
        return _this.printer.print(document);
      });
      if (this.filenames.length > 0) {
        return this.reader.readFiles(this.filenames);
      } else {
        return this.reader.readStandardInput();
      }
    };

    Program.prototype.showError = function(message) {
      return console.error('Error: ' + message);
    };

    Program.prototype.exitWithError = function(message) {
      this.showError(message);
      return process.exit(1);
    };

    return Program;

  })();

  if (!module.parent) {
    program = new Program();
    program.run();
  }

  exports.Reader = Reader;

  exports.Printer = Printer;

  exports.Program = Program;

}).call(this);
